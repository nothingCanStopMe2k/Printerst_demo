{"ast":null,"code":"import { trackPromise } from \"react-promise-tracker\";\nimport axios from \"axios\";\nimport { user } from '../util/user';\nimport constant from \"lodash/constant\";\nimport history from \"../config/history\";\nimport { requestUrl } from \"../config/request-url\"; //\n\nconst DEF_HEADERS = {// Accept: \"application/json\",\n  // \"Content-Type\": \"application/json\",\n};\nconst BASE_URL = process.env.REACT_APP_API_ENDPOINT; // http://localhost:5000 ở backend\n\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL\n});\n\nconst createServerResponse = res => ({\n  status: res.status,\n  data: res.data\n});\n\nconst logout = () => {\n  localStorage.clear();\n  history.push('/login', {\n    prePath: window.location.pathname,\n    expired: true\n  });\n};\n\nconst post = (path = \"\", body = {}, headers = DEF_HEADERS) => trackPromise(axiosInstance.post(path, body, {\n  headers\n}).then(res => res.data).catch(err => Promise.reject(err.response ? err.response.data : err)));\n\nconst get = (path = '', params = {}, headers = DEF_HEADERS) => trackPromise(axiosInstance.get(path, {\n  headers,\n  params\n}).then(res => res.data).catch(err => Promise.reject(err.response ? err.response.data : err)));\n\nconst refreshToken = payload => axios.post(BASE_URL + requestUrl.auth, payload, {\n  headers: DEF_HEADERS\n}).then(res => res.data).catch(() => constant(''));\n\nconst requestHandler = async request => {\n  const userInfo = user.getUserInfo();\n\n  if (userInfo.idToken) {\n    let token = userInfo.idToken;\n    const remainTokenTime = userInfo.exp - new Date().getTime() / 1000;\n    const timeToRefreshToken = 300; // seconds\n\n    if (remainTokenTime < 0) {\n      logout();\n      throw new axios.Cancel('err');\n    }\n\n    if (remainTokenTime < timeToRefreshToken) {\n      const payload = {\n        refreshToken: userInfo.refreshToken,\n        username: userInfo.email\n      };\n      const newToken = await refreshToken(payload);\n\n      if (!newToken) {\n        logout();\n        throw new axios.Cancel('err');\n      }\n\n      user.saveUserStorage(newToken);\n      token = newToken.idToken;\n    }\n\n    request.headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  return request;\n};\n\naxiosInstance.interceptors.request.use(requestHandler); //Lien quan den viec chan lai trc khi den backend\n\nexport const requestService = {\n  post,\n  get\n};","map":{"version":3,"sources":["/media/tuan/F6C4CFA0C4CF620B/Printerst_demo/Pinterest_FrontEnd/src/services/request.service.js"],"names":["trackPromise","axios","user","constant","history","requestUrl","DEF_HEADERS","BASE_URL","process","env","REACT_APP_API_ENDPOINT","axiosInstance","create","baseURL","createServerResponse","res","status","data","logout","localStorage","clear","push","prePath","window","location","pathname","expired","post","path","body","headers","then","catch","err","Promise","reject","response","get","params","refreshToken","payload","auth","requestHandler","request","userInfo","getUserInfo","idToken","token","remainTokenTime","exp","Date","getTime","timeToRefreshToken","Cancel","username","email","newToken","saveUserStorage","interceptors","use","requestService"],"mappings":"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","sourcesContent":["import { trackPromise } from \"react-promise-tracker\";\r\nimport axios from \"axios\";\r\nimport { user } from '../util/user';\r\nimport constant from \"lodash/constant\";\r\nimport history from \"../config/history\";\r\nimport { requestUrl } from \"../config/request-url\";\r\n//\r\n\r\nconst DEF_HEADERS = {\r\n  // Accept: \"application/json\",\r\n  // \"Content-Type\": \"application/json\",\r\n};\r\n\r\nconst BASE_URL = process.env.REACT_APP_API_ENDPOINT; // http://localhost:5000 ở backend\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: BASE_URL,\r\n});\r\n\r\n\r\nconst createServerResponse = (res) => ({ status: res.status, data: res.data });\r\n\r\nconst logout = () => {\r\n  localStorage.clear();\r\n  history.push('/login', { prePath: window.location.pathname, expired: true });\r\n};\r\n\r\nconst post = (path = \"\", body = {}, headers = DEF_HEADERS) =>\r\n  trackPromise(\r\n    axiosInstance\r\n      .post(path, body, { headers })\r\n      .then((res) => res.data)\r\n      .catch((err) => Promise.reject(err.response ? err.response.data : err))\r\n  );\r\n\r\nconst get = (path = '', params = {}, headers = DEF_HEADERS) =>\r\n  trackPromise(\r\n    axiosInstance\r\n      .get(path, { headers, params })\r\n      .then(res => res.data)\r\n      .catch(err => Promise.reject(err.response ? err.response.data : err)),\r\n  );\r\n\r\nconst refreshToken = payload =>\r\naxios\r\n  .post(BASE_URL + requestUrl.auth, payload, {\r\n    headers: DEF_HEADERS,\r\n  })\r\n  .then(res => res.data)\r\n  .catch(() => constant(''));\r\n\r\nconst requestHandler = async request => {\r\n  const userInfo = user.getUserInfo();\r\n\r\n  if (userInfo.idToken) {\r\n    let token = userInfo.idToken;\r\n    const remainTokenTime = userInfo.exp - new Date().getTime() / 1000;\r\n    const timeToRefreshToken = 300; // seconds\r\n\r\n    if (remainTokenTime < 0) {\r\n      logout();\r\n      throw new axios.Cancel('err');\r\n    }\r\n\r\n    if (remainTokenTime < timeToRefreshToken) {\r\n      const payload = {\r\n        refreshToken: userInfo.refreshToken,\r\n        username: userInfo.email,\r\n      };\r\n      const newToken = await refreshToken(payload);\r\n\r\n      if (!newToken) {\r\n        logout();\r\n        throw new axios.Cancel('err');\r\n      }\r\n\r\n      user.saveUserStorage(newToken);\r\n      token = newToken.idToken;\r\n    }\r\n\r\n    request.headers['Authorization'] = `Bearer ${token}`;\r\n  }\r\n\r\n  return request;\r\n};\r\n\r\naxiosInstance.interceptors.request.use(requestHandler); //Lien quan den viec chan lai trc khi den backend\r\n\r\nexport const requestService = { post, get };\r\n"]},"metadata":{},"sourceType":"module"}